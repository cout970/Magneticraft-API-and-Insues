package com.cout970.magneticraft.api.electricity.wires;

import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.world.World;

import com.cout970.magneticraft.api.electricity.ElectricConstants;
import com.cout970.magneticraft.api.electricity.IElectricConductor;
import com.cout970.magneticraft.api.util.MgUtils;
import com.cout970.magneticraft.api.util.VecDouble;
import com.cout970.magneticraft.api.util.VecInt;
import com.cout970.magneticraft.util.Log;

public class WireConnection {

	private World w;
	private VecInt start;
	private VecInt end;
	//cache
	private IElectricPole cache_start;
	private IElectricPole cache_end;
	private double distance;
	private double energyFlow;
	
	public WireConnection(VecInt s, VecInt e, World w){
		start = s;
		end = e;
		VecDouble vec = new VecDouble(s).add(new VecDouble(e).getOpposite());
		distance = vec.mag();
		this.w = w;
	}
	
	public void iterate(){
		valanceConductors(this);
	}

	public double getEnergyFlow() {
		return energyFlow;
	}

	public void setEnergyFlow(double energyFlow) {
		this.energyFlow = energyFlow;
	}

	public IElectricPole getStart() {
		if(cache_start == null){
			cache_start = MgUtils.getElectricPole(start.getTileEntity(w));
		}
		return cache_start;
	}

	public IElectricPole getEnd() {
		if(cache_end == null){
			cache_end = MgUtils.getElectricPole(end.getTileEntity(w));
		}
		return cache_end;
	}
	
	public VecInt vecStart(){
		return start.copy();
	}
	
	public VecInt vecEnd(){
		return end.copy();
	}

	public double getDistance() {
		return distance;
	}
	
	public void save(NBTTagCompound nbt){
		start.save(nbt,"Start");
		end.save(nbt,"End");
		nbt.setDouble("EnergyFlow", energyFlow);
	}
	
	public static WireLoadInfo loadFromNBT(NBTTagCompound nbt){
		WireLoadInfo info = new WireLoadInfo();
		info.start = new VecInt(nbt, "Start");
		info.end = new VecInt(nbt, "End");
		info.flow = nbt.getDouble("EnergyFlow");
		return info;
	}
	
	public static WireConnection loadFromInfo(WireLoadInfo info, World w){
		WireConnection wire = new WireConnection(info.start, info.end, w);
		wire.setEnergyFlow(info.flow);
		return wire;
	}

	public static void valanceConductors(WireConnection con) {
		if(con.getStart() == null || con.getEnd() == null)return;
		//the resistance of the connection
		double resistence = con.distance * ElectricConstants.RESISTANE_COPPER_WIRE;
		IElectricConductor cond_start = con.getStart().getConductor();
		IElectricConductor cond_end = con.getEnd().getConductor();
		//the voltage differennce
		double deltaV = cond_start.getVoltage() - cond_end.getVoltage();
		//sanity check for infinite current
		if(Double.isNaN(con.energyFlow))con.energyFlow = 0;
		//the extra current from the last tick
		double current = con.energyFlow;
		// (V - I*R) I*R is the voltage difference that this conductor should have using the ohm's law, and V the real one
		//vDiff is the voltage difference bvetween the current voltager difference and the proper voltage difference using the ohm's law
		double vDiff = (deltaV - current * resistence);
		//make sure the vDiff is not in the incorrect direction when the resistance is too big
		vDiff = Math.min(vDiff, Math.abs(deltaV));
		vDiff = Math.max(vDiff, -Math.abs(deltaV));
		// add to the next tick current an extra to get the proper voltage difference on the two conductors
		con.energyFlow += (vDiff * cond_start.getIndScale())/cond_start.getVoltageMultiplier();	
		// to the extra current add the current generated by the voltage difference
		current += (deltaV * cond_start.getCondParallel())/(cond_start.getVoltageMultiplier());
		//moves the charge
		cond_start.applyCurrent(-current);
		cond_end.applyCurrent(current);
	}
}
